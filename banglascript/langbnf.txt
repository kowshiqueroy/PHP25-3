- AI Prompt for the Final Code
“Write a single-page PHP application that embeds a kid-friendly language IDE. Use Bootstrap for styling and vanilla JavaScript only for form submission. Your PHP backend must:
- Strip comments (// and /*…*/) from the submitted code
- Tokenize identifiers, numbers, strings, symbols, multi-char operators (==, !=, <>, <=, >=, !<, !>), logic operators (&&, ||, and, or, unary !), arithmetic (+, -, *, /, %), and punctuation
- Parse according to the EduBox grammar (variable declarations with box, assignments, if/else, loop with fixed count or while-style conditions, input(...), output(...))
- Interpret the AST in a sandboxed environment, support comma-separated loop conditions as AND, and produce numbered or boolean results
- Preload a sample program exercising arithmetic, comparisons, loops, logic, and I/O, along with a default scan-input string
- Render the form with two fields (code and scan-input) and display the runner’s output below
Ensure all processing happens on the server in PHP, no external libraries beyond Bootstrap and PHP built-ins.”
- BNF Grammar for EduBox
<program>       ::= { <statement> }
<statement>     ::= <varDecl> ";"
| <assignment> ";"
| <ifStmt>
| <loopStmt>
| <ioStmt> ";"
<varDecl>       ::= "box" <ident> "=" <expr>
<assignment>    ::= <ident> "=" <expr>
<ifStmt>        ::= "if" "(" <expr> ")" "{" { <statement> } "}"
[ "else" "{" { <statement> } "}" ]
<loopStmt>      ::= "loop" "(" <condList> ")" "{" { <statement> } "}"
<condList>      ::= <expr> { "," <expr> }
<ioStmt>        ::= "output" "(" <expr> ")"
| "input" "(" <ident> ")"
<expr>          ::= <orExpr>
<orExpr>        ::= <andExpr> { ( "||" | "or" ) <andExpr> }
<andExpr>       ::= <compExpr> { ( "&&" | "and" ) <compExpr> }
<compExpr>      ::= <addExpr> [ ( "==" | "!=" | "<>" | "<" | ">" | "<=" | ">=" | "!<" | "!>" ) <addExpr> ]
<addExpr>       ::= <mulExpr> { ( "+" | "-" ) <mulExpr> }
<mulExpr>       ::= <unaryExpr> { ( "*" | "/" | "%" ) <unaryExpr> }
<unaryExpr>     ::= ( "!" | "-" ) <unaryExpr> | <factor>
<factor>        ::= <number>
| <string>
| <ident>
| "(" <expr> ")"
<number>        ::= <digits> [ "." <digits> ]
<string>        ::= """ { <char> } """ | "'" { <char> } "'"
<ident>         ::= <letter> { <letter> | <digit> | "" }
<letter>        ::= "A"–"Z" | "a"–"z" | ""
<digit>         ::= "0"–"9"
- Basic Tutorial Guide
• Getting Started
– Open the runner page. Two boxes appear: the Code editor and the Scan Input field.
– The editor is pre­loaded with a sample program that shows variables, arithmetic, comparisons, loops, logic, and I/O.
• Variables & Expressions
– Declare with box name = expr; (numbers, strings, or expressions).
– Reassign with name = expr;.
– Arithmetic: +, -, *, /, %. Strings concatenate with +.
• Comparisons & Logic
– Comparisons: ==, !=, <>, <, >, <=, >=, plus !< (>=) and !> (<=).
– Logic: ! for NOT, &&/and for AND, ||/or for OR.
• Control Flow
– Conditional:
if (condition) { …   } else { …   }
– Loop:
- Fixed count: loop(5) { … } runs 5 times.
- While-style or combined conditions: loop(x < 5) or loop(x<3, y>0) repeats as long as all conditions are true.
• Input & Output
– input(var); reads the next token from the Scan Input buffer (space-separated).
– output(expr); appends the value to the result area.
• Running Your Code
- Edit or replace the code in the editor.
- Provide any needed input tokens in Scan Input.
- Click Run. The interpreter will parse, evaluate, and display each output(...) result line by line.





